diff '--color=auto' -ur ./build.gradle ../build/build.gradle
--- ./build.gradle	2022-09-17 11:07:26.000000000 +0000
+++ ../build/build.gradle	2022-09-20 08:47:59.749057500 +0000
@@ -120,33 +120,10 @@
     into "$buildDir/libDist/lib-ext" //buildDir.path + '/' + libsDirName + '/lib'
 }
 
-task dist(dependsOn: [':jme3-examples:dist', 'mergedJavadoc']){
+task dist(dependsOn: [':jme3-examples:dist']){
     description 'Creates a jME3 examples distribution with all jme3 binaries, sources, javadoc and external libraries under ./dist'
 }
 
-task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
-    title = 'jMonkeyEngine3'
-    destinationDir = mkdir("dist/javadoc")
-
-    options.encoding = 'UTF-8'
-
-    // Allows Javadoc to be generated on Java 8 despite doclint errors.
-    if (JavaVersion.current().isJava8Compatible()) {
-        options.addStringOption('Xdoclint:none', '-quiet')
-    }
-
-    options.overview = file("javadoc-overview.html")
-    // Note: The closures below are executed lazily.
-    source subprojects.collect {project ->
-        project.sourceSets.main.allJava // main only, exclude tests
-    }
-    classpath = files(subprojects.collect {project ->
-            project.sourceSets*.compileClasspath})
-    classpath.from {
-        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
-    }
-}
-
 clean.dependsOn('cleanMergedJavadoc')
 task cleanMergedJavadoc(type: Delete) {
     delete file('dist/javadoc')
diff '--color=auto' -ur ./jme3-core/src/main/java/com/jme3/app/LegacyApplication.java ../build/jme3-core/src/main/java/com/jme3/app/LegacyApplication.java
--- ./jme3-core/src/main/java/com/jme3/app/LegacyApplication.java	2022-09-17 11:07:26.000000000 +0000
+++ ../build/jme3-core/src/main/java/com/jme3/app/LegacyApplication.java	2022-09-20 08:54:34.720484246 +0000
@@ -462,7 +462,7 @@
      * @param contextType the type of context to create
      */
     public void start(JmeContext.Type contextType) {
-        start(contextType, false);
+        start(contextType, true);
     }
 
     /**
diff '--color=auto' -ur ./jme3-core/src/main/java/com/jme3/app/SimpleApplication.java ../build/jme3-core/src/main/java/com/jme3/app/SimpleApplication.java
--- ./jme3-core/src/main/java/com/jme3/app/SimpleApplication.java	2022-09-17 11:07:26.000000000 +0000
+++ ../build/jme3-core/src/main/java/com/jme3/app/SimpleApplication.java	2022-09-20 08:55:58.192376327 +0000
@@ -48,6 +48,12 @@
 import com.jme3.system.AppSettings;
 import com.jme3.system.JmeContext.Type;
 import com.jme3.system.JmeSystem;
+import com.jme3.system.NanoTimer;
+
+import java.util.Random;
+import java.io.FileWriter;
+import java.lang.reflect.Method;
+import java.lang.reflect.InvocationTargetException;
 
 /**
  * <code>SimpleApplication</code> is the base class for all jME3 Applications.
@@ -70,6 +76,11 @@
     public static final String INPUT_MAPPING_MEMORY = DebugKeysAppState.INPUT_MAPPING_MEMORY;
     public static final String INPUT_MAPPING_HIDE_STATS = "SIMPLEAPP_HideStats";
 
+    private Method dacapoRequestsStarting;
+    private Method dacapoRequestsFinished;
+    private Method dacapoRequestStart;
+    private Method dacapoRequestEnd;
+
     protected Node rootNode = new Node("Root Node");
     protected Node guiNode = new Node("Gui Node");
     protected BitmapText fpsText;
@@ -77,6 +88,8 @@
     protected FlyByCamera flyCam;
     protected boolean showSettings = true;
     final private AppActionListener actionListener = new AppActionListener();
+    private Random random = new Random(0);
+    private final int framesToRender = Integer.parseInt(System.getProperty("framesToRender"));
 
     private class AppActionListener implements ActionListener {
 
@@ -103,6 +116,17 @@
 
     public SimpleApplication(AppState... initialStates) {
         super(initialStates);
+        try {
+            Class<?> clazz = Class.forName("org.dacapo.harness.LatencyReporter", true, SimpleApplication.class.getClassLoader());
+            dacapoRequestStart = clazz.getMethod("start", int.class);
+            dacapoRequestEnd = clazz.getMethod("end", int.class);
+            dacapoRequestsStarting = clazz.getDeclaredMethod("requestsStarting", null);
+            dacapoRequestsFinished = clazz.getDeclaredMethod("requestsFinished", null);
+        } catch (ClassNotFoundException e) {
+            System.err.println("Failed to access DaCapo latency reporter: "+e);
+        } catch (NoSuchMethodException e) {
+            System.err.println("Failed trying to create latency stats: "+e);
+        }
     }
 
     @Override
@@ -240,6 +264,46 @@
         simpleInitApp();
     }
 
+    public void dacapoStarting() {
+        try {
+          dacapoRequestsStarting.invoke(null);
+        } catch (IllegalAccessException e) {
+          System.err.println("Failed to access DaCapo latency reporter: "+e);
+        } catch (InvocationTargetException e) {
+          System.err.println("Failed to invoke LatencyReporter.requestsStarting(): "+e);
+        }
+    }
+    
+    public void dacapoFinished() {
+        try {
+          dacapoRequestsFinished.invoke(null);
+        } catch (IllegalAccessException e) {
+          System.err.println("Failed to access DaCapo latency reporter: "+e);
+        } catch (InvocationTargetException e) {
+          System.err.println("Failed to invoke LatencyReporter.requestsFinished(): "+e);
+        }
+    }
+
+    public void dacapoStart() {
+        try {
+            dacapoRequestStart.invoke(null, 0);  // only one reporter object
+        } catch (IllegalAccessException e) {
+            System.err.println("Failed to access DaCapo latency reporter: "+e);
+        } catch (InvocationTargetException e) {
+            System.err.println("Failed to invoke LatencyReporter.start(): "+e);
+        }
+    }
+
+    public void dacapoEnd() {
+        try {
+            dacapoRequestEnd.invoke(null, 0);  // only one reporter object
+        } catch (IllegalAccessException e) {
+            System.err.println("Failed to access DaCapo latency reporter: "+e);
+        } catch (InvocationTargetException e) {
+            System.err.println("Failed to invoke LatencyReporter.end(): "+e);
+        }
+    }
+
     @Override
     public void update() {
         if (prof != null)
@@ -258,7 +322,8 @@
         stateManager.update(tpf);
 
         // simple update and root node
-        simpleUpdate(tpf);
+        // simpleUpdate(tpf);
+        dacapoUpdate();
 
         if (prof != null)
             prof.appStep(AppStep.SpatialUpdate);
@@ -297,6 +362,30 @@
 
     public abstract void simpleInitApp();
 
+    private void dacapoUpdate() {
+        dacapoEnd();
+
+        int frameCount = ((NanoTimer) timer).getFrameCount();
+        int tenPercent = framesToRender / 10;
+        if (frameCount % tenPercent == 0) {
+            System.out.print("\r"+(frameCount / tenPercent)+"0%");
+        }
+        if (frameCount == framesToRender) {
+            /* we're done; terminate */
+            synchronized (context){
+                System.out.println();
+                dacapoFinished();
+                System.out.println("Rendered "+frameCount+" frames for "+this.getClass().getSimpleName());
+                context.notify();
+                this.stop();
+            }            
+        } else {
+            /* update camera for the next frame, using seeded random number */
+            dacapoStart();
+            cam.setLocation(cam.getLocation().setY(cam.getLocation().getY()+ (random.nextFloat()-0.5f) * 3));
+        }
+    }
+
     public void simpleUpdate(float tpf) {
     }
 
diff '--color=auto' -ur ./jme3-core/src/main/java/com/jme3/system/AppSettings.java ../build/jme3-core/src/main/java/com/jme3/system/AppSettings.java
--- ./jme3-core/src/main/java/com/jme3/system/AppSettings.java	2022-09-17 11:07:26.000000000 +0000
+++ ../build/jme3-core/src/main/java/com/jme3/system/AppSettings.java	2022-09-20 08:47:59.753057493 +0000
@@ -267,8 +267,8 @@
 
     static {
         defaults.put("CenterWindow", true);
-        defaults.put("Width", 640);
-        defaults.put("Height", 480);
+        defaults.put("Width", 1920);
+        defaults.put("Height", 1080);
         defaults.put("BitsPerPixel", 24);
         defaults.put("Frequency", 60);
         defaults.put("DepthBits", 24);
diff '--color=auto' -ur ./jme3-core/src/main/java/com/jme3/system/NanoTimer.java ../build/jme3-core/src/main/java/com/jme3/system/NanoTimer.java
--- ./jme3-core/src/main/java/com/jme3/system/NanoTimer.java	2022-09-17 11:07:24.000000000 +0000
+++ ../build/jme3-core/src/main/java/com/jme3/system/NanoTimer.java	2022-09-20 08:47:59.753057493 +0000
@@ -46,6 +46,7 @@
     private long previousTime;
     private float tpf;
     private float fps;
+    private int frameCount;
     
     public NanoTimer() {
         startTime = System.nanoTime();
@@ -82,11 +83,16 @@
         return tpf;
     }
 
+    public int getFrameCount() {
+        return frameCount;
+    }
+
     @Override
     public void update() {
         tpf = (getTime() - previousTime) * (1.0f / TIMER_RESOLUTION);
         fps = 1.0f / tpf;
         previousTime = getTime();
+        frameCount++;
     }
     
     @Override
diff '--color=auto' -ur ./jme3-examples/build.gradle ../build/jme3-examples/build.gradle
--- ./jme3-examples/build.gradle	2022-09-17 11:07:26.000000000 +0000
+++ ../build/jme3-examples/build.gradle	2022-09-20 08:47:59.753057493 +0000
@@ -19,8 +19,8 @@
     implementation project(':jme3-effects')
     implementation project(':jme3-jbullet')
     implementation project(':jme3-jogg')
-    implementation project(':jme3-lwjgl')
-//    implementation project(':jme3-lwjgl3')
+//    implementation project(':jme3-lwjgl')
+    implementation project(':jme3-lwjgl3')
     implementation project(':jme3-networking')
     implementation project(':jme3-niftygui')
     implementation project(':jme3-plugins')
diff '--color=auto' -ur ./jme3-examples/src/main/java/jme3test/TestChooser.java ../build/jme3-examples/src/main/java/jme3test/TestChooser.java
--- ./jme3-examples/src/main/java/jme3test/TestChooser.java	2022-09-17 11:07:26.000000000 +0000
+++ ../build/jme3-examples/src/main/java/jme3test/TestChooser.java	2022-09-20 09:00:48.360022711 +0000
@@ -53,11 +53,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.SynchronousQueue;
 import java.util.concurrent.ThreadFactory;
@@ -77,7 +73,7 @@
  * Class with a main method that displays a dialog to choose any jME demo to be
  * started.
  */
-public class TestChooser extends JFrame {
+public class TestChooser {
     private static final Logger logger = Logger.getLogger(TestChooser.class
             .getName());
 
@@ -87,7 +83,7 @@
      * Only accessed from EDT
      */
     private List<Class<?>> selectedClass = null;
-    private boolean showSetting = true;
+    private static boolean showSetting = false;
 
     private ExecutorService executorService;
 
@@ -95,20 +91,12 @@
      * Constructs a new TestChooser that is initially invisible.
      */
     public TestChooser() throws HeadlessException {
-        super("TestChooser");
+        // We do not need this for headless mode testing
+        // super("TestChooser");
         /* This listener ends application when window is closed (x button on top right corner of test chooser).
          * @see issue#85 https://github.com/jMonkeyEngine/jmonkeyengine/issues/85
          */
-        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
-    }
-
-    @Override
-    public void dispose() {
-        if (executorService != null) {
-            executorService.shutdown();
-        }
-
-        super.dispose();
+        // setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
     }
 
     /**
@@ -213,11 +201,13 @@
         // Get the list of the files contained in the package
         try (DirectoryStream<Path> stream = Files.newDirectoryStream(directory, getFileFilter())) {
             for (Path file : stream) {
-
                 // we are only interested in .class files
                 if (Files.isDirectory(file)) {
                     if (recursive) {
-                        addAllFilesInDirectory(file, allClasses, packageName + file.getFileName() + ".", true);
+                        String dir = file.getFileName().toString();
+                        if (dir.charAt(dir.length()-1) == '/')
+                            dir = dir.substring(0, dir.length()-1);
+                        addAllFilesInDirectory(file, allClasses, packageName + dir + ".", true);
                     }
                 } else {
                     Class<?> result = load(packageName + file.getFileName());
@@ -251,14 +241,14 @@
 
     private void startApp(final List<Class<?>> appClass) {
         if (appClass == null || appClass.isEmpty()) {
-            JOptionPane.showMessageDialog(rootPane,
-                                          "Please select a test from the list",
-                                          "Error",
-                                          JOptionPane.ERROR_MESSAGE);
+            System.err.println("Error: Please select a test from the list");
             return;
         }
-
-        executorService.submit(getAppRunner(appClass));
+        try {
+            executorService.submit(getAppRunner(appClass)).get();  // wait for completion
+        } catch (Exception e) {
+            System.err.println("Job interrupted: "+e);
+        }
     }
 
     private Runnable getAppRunner(final List<Class<?>> appClass) {
@@ -267,26 +257,16 @@
             public void run() {
                 for (Class<?> clazz : appClass) {
                     try {
-                        if (LegacyApplication.class.isAssignableFrom(clazz)) {
-                            Object app = clazz.newInstance();
-                            if (app instanceof SimpleApplication) {
-                                final Method settingMethod = clazz.getMethod("setShowSettings", boolean.class);
-                                settingMethod.invoke(app, showSetting);
-                            }
-                            final Method mainMethod = clazz.getMethod("start");
-                            mainMethod.invoke(app);
+                        if (LegacyApplication.class.isAssignableFrom(clazz) && !clazz.getName().equals("TestMultiplesFilters")) {
+                            Object app = clazz.getConstructor().newInstance();
+                            final Method mainMethod = clazz.getMethod("start", JmeContext.Type.class);
+
+                            mainMethod.invoke(app, JmeContext.Type.Headless);
                             Field contextField = LegacyApplication.class.getDeclaredField("context");
                             contextField.setAccessible(true);
-                            JmeContext context = null;
-                            while (context == null) {
-                                context = (JmeContext) contextField.get(app);
-                                Thread.sleep(100);
-                            }
-                            while (!context.isCreated()) {
-                                Thread.sleep(100);
-                            }
-                            while (context.isCreated()) {
-                                Thread.sleep(100);
+                            JmeContext context = (JmeContext) contextField.get(app);
+                            synchronized(context) {
+                                context.wait();
                             }
                         } else {
                             final Method mainMethod = clazz.getMethod("main", (new String[0]).getClass());
@@ -313,85 +293,6 @@
         };
     }
 
-    /**
-     * Code to create components and action listeners.
-     *
-     * @param classes
-     *            what Classes to show in the list box
-     */
-    private void setup(Collection<Class<?>> classes) {
-        final JPanel mainPanel = new JPanel();
-        mainPanel.setLayout(new BorderLayout());
-        getContentPane().setLayout(new BorderLayout());
-        getContentPane().add(mainPanel, BorderLayout.CENTER);
-        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
-
-        final FilteredJList list = new FilteredJList();
-        list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
-        DefaultListModel<Class<?>> model = new DefaultListModel<>();
-        model.ensureCapacity(classes.size());
-        for (Class<?> c : classes) {
-            model.addElement(c);
-        }
-        list.setModel(model);
-
-        mainPanel.add(createSearchPanel(list), BorderLayout.NORTH);
-        mainPanel.add(new JScrollPane(list), BorderLayout.CENTER);
-
-        list.getSelectionModel().addListSelectionListener(
-                new ListSelectionListener() {
-                    @Override
-                    public void valueChanged(ListSelectionEvent e) {
-                        selectedClass = list.getSelectedValuesList();
-                    }
-                });
-        list.addMouseListener(new MouseAdapter() {
-            @Override
-            public void mouseClicked(MouseEvent e) {
-                if (e.getClickCount() == 2 && selectedClass != null) {
-                    startApp(selectedClass);
-                }
-            }
-        });
-        list.addKeyListener(new KeyAdapter() {
-            @Override
-            public void keyTyped(KeyEvent e) {
-                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
-                    startApp(selectedClass);
-                } else if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
-                    dispose();
-                }
-            }
-        });
-
-        final JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
-        mainPanel.add(buttonPanel, BorderLayout.PAGE_END);
-
-        final JButton okButton = new JButton("Ok");
-        okButton.setMnemonic('O');
-        buttonPanel.add(okButton);
-        getRootPane().setDefaultButton(okButton);
-        okButton.addActionListener(new ActionListener() {
-            @Override
-            public void actionPerformed(ActionEvent e) {
-                startApp(selectedClass);
-            }
-        });
-
-        final JButton cancelButton = new JButton("Cancel");
-        cancelButton.setMnemonic('C');
-        buttonPanel.add(cancelButton);
-        cancelButton.addActionListener(new ActionListener() {
-            @Override
-            public void actionPerformed(ActionEvent e) {
-                dispose();
-            }
-        });
-
-        pack();
-        center();
-    }
-
     private class FilteredJList extends JList<Class<?>> {
         private static final long serialVersionUID = 1L;
 
@@ -437,22 +338,6 @@
     }
 
     /**
-     * center the frame.
-     */
-    private void center() {
-        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
-        Dimension frameSize = this.getSize();
-        if (frameSize.height > screenSize.height) {
-            frameSize.height = screenSize.height;
-        }
-        if (frameSize.width > screenSize.width) {
-            frameSize.width = screenSize.width;
-        }
-        this.setLocation((screenSize.width - frameSize.width) / 2,
-                (screenSize.height - frameSize.height) / 2);
-    }
-
-    /**
      * Start the chooser.
      *
      * @param args
@@ -474,10 +359,24 @@
             }
         });
         final Set<Class<?>> classes = new LinkedHashSet<>();
-        logger.fine("Composing Test list...");
         addDisplayedClasses(classes);
-        setup(classes);
-        setVisible(true);
+        Iterator<Class<?>> i = classes.iterator();
+        while (i.hasNext()){
+            String name = i.next().getName();
+            if (!contains(args, name))
+                i.remove();
+        }
+        final List<Class<?>> selected = new ArrayList<Class<?>>();
+        selected.addAll(classes);
+        startApp(selected);
+    }
+
+    private static boolean contains(String[] args, String name){
+        for (String packageName : args){
+            if (name.contains(packageName))
+                return true;
+        }
+        return false;
     }
 
     protected void addDisplayedClasses(Set<Class<?>> classes) {
diff '--color=auto' -ur ./jme3-examples/src/main/java/jme3test/water/TestMultiPostWater.java ../build/jme3-examples/src/main/java/jme3test/water/TestMultiPostWater.java
--- ./jme3-examples/src/main/java/jme3test/water/TestMultiPostWater.java	2022-09-17 11:07:24.000000000 +0000
+++ ../build/jme3-examples/src/main/java/jme3test/water/TestMultiPostWater.java	2022-09-20 08:47:59.753057493 +0000
@@ -44,6 +44,7 @@
 import com.jme3.scene.Node;
 import com.jme3.scene.Spatial;
 import com.jme3.system.AppSettings;
+import com.jme3.system.JmeContext;
 import com.jme3.terrain.geomipmap.TerrainQuad;
 import com.jme3.terrain.heightmap.AbstractHeightMap;
 import com.jme3.terrain.heightmap.ImageBasedHeightMap;
@@ -70,15 +71,14 @@
         TestMultiPostWater app = new TestMultiPostWater();
         AppSettings s = new AppSettings(true);
         s.setRenderer(AppSettings.LWJGL_OPENGL2);
-        s.setAudioRenderer(AppSettings.LWJGL_OPENAL);
         app.setSettings(s);
 
-        app.start();
+        app.start(JmeContext.Type.Headless);
     }
 
     @Override
     public void simpleInitApp() {
-
+        System.out.print("Initializing...");
 //      setDisplayFps(false);
 //      setDisplayStatView(false);
 
@@ -156,6 +156,10 @@
         fpp.addFilter(water3);
 
         viewPort.addProcessor(fpp);
+        System.out.println("...done.");
+
+        dacapoStarting();
+        dacapoStart();
 
         //fpp.setNumSamples(4);
     }
@@ -212,5 +216,6 @@
 
     @Override
     public void simpleUpdate(float tpf) {
+        super.simpleUpdate(tpf);
     }
 }
diff '--color=auto' -ur ./jme3-networking/build.gradle ../build/jme3-networking/build.gradle
--- ./jme3-networking/build.gradle	2022-09-17 11:07:24.000000000 +0000
+++ ../build/jme3-networking/build.gradle	2022-09-20 08:47:59.753057493 +0000
@@ -1,5 +1,6 @@
 dependencies {
     api project(':jme3-core')
+    compile 'com.sun.xml.ws:jaxws-ri:2.3.2'
 }
 
 javadoc {
diff '--color=auto' -ur ./jme3-plugins/build.gradle ../build/jme3-plugins/build.gradle
--- ./jme3-plugins/build.gradle	2022-09-17 11:07:26.000000000 +0000
+++ ../build/jme3-plugins/build.gradle	2022-09-20 08:47:59.753057493 +0000
@@ -13,4 +13,8 @@
     api project(':jme3-core')
     api 'com.google.code.gson:gson:2.8.1'
     testImplementation project(':jme3-desktop')
+    api 'javax.xml.bind:jaxb-api:2.3.0'
+    api 'javax.xml.bind:jaxb-api:2.3.0'
+    api 'com.sun.xml.bind:jaxb-core:2.3.0'
+    api 'com.sun.xml.bind:jaxb-impl:2.3.0'
 }
