diff '--color=auto' -ur ./Python-2.7/Tools/pybench/CommandLine.py ../build/Python-2.7/Tools/pybench/CommandLine.py
--- ./Python-2.7/Tools/pybench/CommandLine.py	2006-06-13 18:56:56.000000000 +0000
+++ ../build/Python-2.7/Tools/pybench/CommandLine.py	2022-12-27 05:02:06.017187280 +0000
@@ -367,7 +367,7 @@
             print
             rc = 1
 
-        raise SystemExit,rc
+        # raise SystemExit,rc
 
     def add_option(self, option):
 
diff '--color=auto' -ur ./Python-2.7/Tools/pybench/pybench.py ../build/Python-2.7/Tools/pybench/pybench.py
--- ./Python-2.7/Tools/pybench/pybench.py	2009-10-09 14:32:19.000000000 +0000
+++ ../build/Python-2.7/Tools/pybench/pybench.py	2022-12-27 05:02:06.017187280 +0000
@@ -325,9 +325,9 @@
         t = timer()
         test()
         t = timer() - t
-        if t < MIN_TEST_RUNTIME:
-            raise ValueError('warp factor too high: '
-                             'test times are < 10ms')
+        # if t < MIN_TEST_RUNTIME:
+        #     raise ValueError('warp factor too high: '
+        #                      'test times are < 10ms')
         eff_time = t - min_overhead
         if eff_time < 0:
             raise ValueError('wrong calibration')
@@ -558,8 +558,7 @@
                        (total_eff_time * MILLI_SECONDS))
                 print
             else:
-                print '* Round %i done in %.3f seconds.' % (i+1,
-                                                            total_eff_time)
+                print '* Round %i done.' % (i+1)
         print
 
     def stat(self):
@@ -838,9 +837,8 @@
         print '-' * LINE
         print 'PYBENCH %s' % __version__
         print '-' * LINE
-        print '* using %s %s' % (
-            getattr(platform, 'python_implementation', lambda:'Python')(),
-            string.join(string.split(sys.version), ' '))
+        print '* using %s' % (
+            getattr(platform, 'python_implementation', lambda:'Python')())
 
         # Switch off garbage collection
         if not withgc:
@@ -931,17 +929,17 @@
             print '*** KeyboardInterrupt -- Aborting'
             print
             return
-        bench.print_header()
-        if compare_to:
-            bench.print_comparison(compare_to,
-                                   hidenoise=hidenoise,
-                                   limitnames=limitnames)
-        else:
-            bench.print_benchmark(hidenoise=hidenoise,
-                                  limitnames=limitnames)
+        # bench.print_header()
+        # if compare_to:
+        #     bench.print_comparison(compare_to,
+        #                            hidenoise=hidenoise,
+        #                            limitnames=limitnames)
+        # else:
+        #     bench.print_benchmark(hidenoise=hidenoise,
+        #                           limitnames=limitnames)
 
         # Ring bell
-        sys.stderr.write('\007')
+        # sys.stderr.write('\007')
 
         if reportfile:
             try:
diff '--color=auto' -ur ./src/org/python/core/imp.java ../build/src/org/python/core/imp.java
--- ./src/org/python/core/imp.java	2022-11-29 11:19:10.000000000 +0000
+++ ../build/src/org/python/core/imp.java	2022-12-27 05:12:01.409009086 +0000
@@ -923,22 +923,31 @@
                 long pyTime = sourceFile.lastModified();
 
                 if (haveCompiled) {
-                    // We have the compiled file and will use that if it is not out of date
-                    logger.log(Level.FINE, "# trying precompiled {0}", compiledFile.getPath());
-                    long classTime = compiledFile.lastModified();
-                    if (classTime >= pyTime) {
+                    // // We have the compiled file and will use that if it is not out of date
+                    //
+                    // DaCapo: skip this check since: a) we have precompiled things, b) we checksum
+                    // the source and class files, c) we don't want to write new class files, and 
+                    // d) the DaCapo files may have been copied with the reult that a given class file 
+                    // may have a (slightly) older timestamp than the source file.
+                    //
+                    // logger.log(Level.FINE, "# trying precompiled {0}", compiledFile.getPath());
+                    // long classTime = compiledFile.lastModified();
+                    // if (classTime >= pyTime) {
                         // The compiled file does not appear out of date relative to the source.
                         PyObject ret = createFromPyClass(modName, makeStream(compiledFile), //
-                                true, // OK to fail here as we have the source
+                                false, // should not fail here; we have the source, do not want to generate new code
                                 displaySourceName, displayCompiledName, pyTime);
                         if (ret != null) {
                             return ret;
+                        } else {
+                            System.err.println("Failed to generate Python from PyClass");
+                            new Exception().printStackTrace(System.err);
                         }
-                    } else {
-                        logger.log(Level.FINE,
-                                "# {0} dated ({1,date} {1,time,long}) < ({2,date} {2,time,long})",
-                                new Object[] {name, new Date(classTime), new Date(pyTime)});
-                    }
+                    // } else {
+                    //     logger.log(Level.FINE,
+                    //             "# {0} dated ({1,date} {1,time,long}) < ({2,date} {2,time,long})",
+                    //             new Object[] {name, new Date(classTime), new Date(pyTime)});
+                    // }
                 }
 
                 // The compiled class is not present, is out of date, or using it failed somehow.
diff '--color=auto' -ur ./src/org/python/core/PySystemState.java ../build/src/org/python/core/PySystemState.java
--- ./src/org/python/core/PySystemState.java	2022-11-29 11:19:10.000000000 +0000
+++ ../build/src/org/python/core/PySystemState.java	2022-12-27 05:02:06.017187280 +0000
@@ -1296,6 +1296,11 @@
         packageManager = new SysPackageManager(pkgdir, props);
     }
 
+    public static void setArgv(String[] args) {
+	defaultArgv = initArgv(args);
+	Py.defaultSystemState.argv = (PyList)defaultArgv.repeat(1);
+    }
+
     private static PyList initArgv(String[] args) {
         PyList argv = new PyList();
         if (args != null) {
