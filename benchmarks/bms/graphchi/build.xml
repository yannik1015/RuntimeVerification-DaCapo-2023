<!--
 * Copyright (c) 2009 The Australian National University.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License v2.0.
 * You may obtain the license at
 * 
 *    http://www.opensource.org/licenses/apache2.0.php
 -->
<project name="graphchi" default="all" basedir="../..">
    <description>DaCapo GraphChi benchmark</description>
    <property file="local.properties"/>
    <property file="dacapo.properties"/>

    <property name="bm-name" value="graphchi"/>
    <property name="bm-version" value="0.2.2"/>
    <property name="bm-version-str" value="graphchi ${bm-version}"/>
    <property name="bm-src" value="${bm-name}-java-src-${bm-version}.tar.gz"/>
    <property name="bm-git-url" value="${github.url}/GraphChi/graphchi-java"/>
    <property name="bm-git-commit" value="e5136d52512823fb34594e2851cbb23d62dd7ac8"/>

    <property name="netflix-mm-dl" value="netflix_mm.gz"/>
    <property name="netflix-mm-url" value="https://courses.cs.washington.edu/courses/cse547/16sp/datasets"/>
    <property name="livejournal-dl" value="soc-LiveJournal1.txt.gz"/>
    <property name="livejournal-url" value="https://snap.stanford.edu/data"/>

    <import file="../common.xml"/>

    <property name="mvn-home" location="${toolsdir}/apache-maven-${mvn.version}/bin"/>
    <property name="mvn-exe" value="${mvn-home}/mvn"/>
    <condition property="mvn-exe" value="${mvn-home}/mvn.bat">
        <os family="windows"/>
    </condition>

    <target name="source">
        <antcall target="check-source">
            <param name="target-dir" value="${bm-downloads}"/>
            <param name="target-url" value="${dacapo.dat.url}/"/>
            <param name="target-file" value="graphchi-data.zip"/>
        </antcall>
    </target>

    <target name="unpack" depends="untar, patch"/>

    <target name="bm-build">
        <mkdir dir="${bm-build-dir}"/>

        <exec executable="${mvn-exe}" dir="${bm-build-dir}" failonerror="yes">
            <arg line="assembly:assembly -DdescriptorId=jar-with-dependencies"/>
        </exec>
    </target>

    <target name="jar">
        <copy file="${bm-build-dir}/target/${bm-name}-java-${bm-version}-jar-with-dependencies.jar"
                tofile="${bm-jars}/${bm-name}-${bm-version}.jar"/>
    </target>


<!--
   * NOTE on generating source data for graphchi.
   *
   * 1. The source data is the training set of Netflix Challenge, containing
   *    99,072,112 ratings from user ids to movie ids. Each line is in the form
   *    of "userid movieid rating"
   *    https://courses.cs.washington.edu/courses/cse547/16sp/datasets.html
   * 2. The dataset is trimmed to 10M, 1M and 10K edges for large, default,
   *    and small.  This is trivial: trim the file to the appropriate number
   *    of lines (+3 for the header), then find the largest userid and largest
   *    movieid in the resulting file, and update the header accordingly.
   * 3. In our workload, we avoid the sharding step, which is basically disk
   *    I/O.  This is very easy to do; we just run the workload against the
   *    dataset above, and on its first iteration, the workload will shard
   *    the data.   We capture that sharded data in our dataset zip file,
   *    replacing the original input text file with an empty file of the
   *    same name.
-->
    <target name="data">
        <unzip dest="${bm-data}" src="${bm-downloads}/graphchi-data.zip"/>
    </target>

</project>
